const express = require('express');
const { PrismaClient } = require('@prisma/client');
const { protectNonGetRoutes } = require('../middleware/auth');

const router = express.Router();
const prisma = new PrismaClient();

// Obter conte√∫do de uma se√ß√£o espec√≠fica (p√∫blico)
router.get('/:section', async (req, res) => {
  try {
    const { section } = req.params;
    
    let content = await prisma.content.findUnique({
      where: { section }
    });
    
    if (!content) {
      // Criar conte√∫do padr√£o se n√£o existir
      const defaultContent = getDefaultContent(section);
      
      content = await prisma.content.create({
        data: {
          section,
          content: defaultContent
        }
      });
    }
    
    // Se for a se√ß√£o de informa√ß√µes, verificar se est√° no formato JSON
    if (section === 'informacoes') {
      try {
        // Tentar fazer parse do JSON
        const parsedContent = JSON.parse(content.content);
        // Se for JSON v√°lido, retornar como est√°
        res.json(content);
      } catch (e) {
        // Se n√£o for JSON, √© o formato antigo (texto √∫nico)
        // Vamos converter para o novo formato JSON
        const contentText = content.content;
        
        // Extrair se√ß√µes baseadas em emojis ou t√≠tulos
        const extractSection = (emoji, title) => {
          const emojiRegex = new RegExp(`${emoji}[^\\n]*\\n([\\s\\S]*?)(?=\\n\\n|$)`, 'i');
          const titleRegex = new RegExp(`${title}[^\\n]*\\n([\\s\\S]*?)(?=\\n\\n|$)`, 'i');
          
          let match = contentText.match(emojiRegex);
          if (!match) {
            match = contentText.match(titleRegex);
          }
          
          return match ? match[1].trim() : '';
        };
        
        const infoFields = {
          cerimonia: extractSection('üìç Cerim√¥nia', 'Cerim√¥nia'),
          recepcao: extractSection('üìç Recep√ß√£o', 'Recep√ß√£o'),
          dressCode: extractSection('üëó Dress Code', 'Dress Code'),
          hospedagem: extractSection('üè® Hospedagem', 'Hospedagem'),
          transporte: extractSection('üöñ Transporte', 'Transporte'),
          // Campos vazios para os novos atributos
          cerimonia_address: '',
          cerimonia_photo: '',
          recepcao_address: '',
          recepcao_photo: '',
          dressCode_photo: '',
          hospedagem_address: '',
          hospedagem_photo: '',
          transporte_address: '',
          transporte_photo: ''
        };
        
        // Atualizar o conte√∫do no banco para o novo formato
        const updatedContent = await prisma.content.update({
          where: { section },
          data: { content: JSON.stringify(infoFields) }
        });
        
        res.json(updatedContent);
      }
    } else {
      res.json(content);
    }
  } catch (error) {
    console.error('Erro ao buscar conte√∫do:', error);
    res.status(500).json({ message: 'Erro no servidor' });
  }
});

// Atualizar conte√∫do de uma se√ß√£o (protegido)
router.put('/:section', protectNonGetRoutes, async (req, res) => {
  try {
    const { section } = req.params;
    const { content: contentText } = req.body;
    
    // Valida√ß√£o adicional para a se√ß√£o de informa√ß√µes
    if (section === 'informacoes') {
      try {
        // Verificar se o conte√∫do √© um JSON v√°lido
        const parsedContent = JSON.parse(contentText);
        
        // Verificar se todos os campos obrigat√≥rios est√£o presentes
        const requiredFields = ['cerimonia', 'recepcao', 'dressCode', 'hospedagem', 'transporte'];
        const missingFields = requiredFields.filter(field => !parsedContent.hasOwnProperty(field));
        
        if (missingFields.length > 0) {
          return res.status(400).json({ 
            message: 'Campos obrigat√≥rios ausentes', 
            missingFields 
          });
        }
      } catch (e) {
        return res.status(400).json({ 
          message: 'O conte√∫do deve ser um JSON v√°lido para a se√ß√£o de informa√ß√µes' 
        });
      }
    }
    
    let content = await prisma.content.findUnique({
      where: { section }
    });
    
    if (content) {
      content = await prisma.content.update({
        where: { section },
        data: { content: contentText }
      });
    } else {
      content = await prisma.content.create({
        data: {
          section,
          content: contentText
        }
      });
    }
    
    res.json(content);
  } catch (error) {
    console.error('Erro ao atualizar conte√∫do:', error);
    res.status(500).json({ message: 'Erro no servidor' });
  }
});

// Fun√ß√£o auxiliar para obter conte√∫do padr√£o
function getDefaultContent(section) {
  if (section === 'informacoes') {
    // Retornar o conte√∫do padr√£o no novo formato JSON
    return JSON.stringify({
      cerimonia: 'Concatedral de S√£o Pedro dos Cl√©rigos ‚Äì √†s 19h\nAv. Dantas Barreto, 677 ‚Äì S√£o Jos√©\n(Dica: teremos manobrista nesse ponto)',
      cerimonia_address: 'Av. Dantas Barreto, 677 - S√£o Jos√©, Recife - PE',
      cerimonia_photo: 'cerimonia.jpg',
      
      recepcao: 'Espa√ßo Dom ‚Äì R. das Oficinas, 15 ‚Äì Pina (dentro da Ecomariner)\n‚ö† Importante: no Waze, digite "Ecomariner" (n√£o "Espa√ßo Dom")\nDica: Passando o t√∫nel do RioMar, cruza a Ant√¥nio de Gois, primeira direita e depois primeira esquerda.',
      recepcao_address: 'R. das Oficinas, 15 - Pina, Recife - PE',
      recepcao_photo: 'recepcao.jpg',
      
      dressCode: 'Formal ‚Äì porque esse dia merece um look √† altura!',
      dressCode_photo: 'dresscode.jpg',
      
      hospedagem: 'Hotel Luzeiros Recife\nIbis Boa Viagem',
      hospedagem_address: 'Av. Boa Viagem, 5000 - Boa Viagem, Recife - PE',
      hospedagem_photo: 'hospedagem.jpg',
      
      transporte: 'Parceria com TeleT√°xi na sa√≠da da igreja!',
      transporte_address: 'Av. Dantas Barreto, 677 - S√£o Jos√©, Recife - PE',
      transporte_photo: 'transporte.jpg'
    });
  }
  
  const defaultContents = {
    home: 'Estamos muito felizes em ter voc√™ aqui!',
    historia: 'Era uma vez‚Ä¶ uma amizade que virou encontro, um encontro que virou hist√≥ria, e uma hist√≥ria que virou vida.\n\nMar√≠lia e Iago se conheceram ainda no col√©gio N√∫cleo/Cursinho, em 2013, gra√ßas ao empurr√£ozinho de um grande amigo em comum, Jorge (obrigado por isso, Jorge!). Entre risadas e encontros nos corredores, uma amizade foi se formando ‚Äî at√© que, no dia 12 de setembro de 2015, tudo mudou: com um beijo surpresa na boate Seu Regueira, o que era leve come√ßou a ficar s√©rio.\n\nPoucos dias depois, no dia 18 de setembro, sa√≠ram com amigos e come√ßaram a conversar sobre o dia seguinte. Mar√≠lia comentou que iria para o anivers√°rio da tia, e Iago pediu para ir junto. Brincando, disse que queria ser apresentado como "irm√£o" ‚Äî e foi nesse momento que o cora√ß√£o dela teve certeza: era ele. No dia seguinte, 19 de setembro de 2015, come√ßaram oficialmente a namorar.\n\nDez anos depois ‚Äî sim, 10 anos depois! ‚Äî aqui est√£o eles, dizendo "sim" um ao outro no altar, exatamente um dia ap√≥s a data que marcou o in√≠cio dessa jornada.'
  };
  
  return defaultContents[section] || '';
}

module.exports = router;
